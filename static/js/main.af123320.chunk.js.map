{"version":3,"sources":["logo.svg","components/RequestInput.tsx","components/RequestsList.tsx","components/Loader.tsx","components/Styled/Paper.ts","components/Styled/Title.tsx","components/Styled/ControlsWrapper.ts","App.tsx","serviceWorker.ts","redux/reducers/loader.ts","redux/sagas.ts","redux/rootReducer.ts","redux/reducers/requests.ts","index.tsx"],"names":["module","exports","StyledForm","styled","form","compose","connect","state","requests","loader","addRequest","payload","type","props","loading","Form","onSubmit","data","formProps","submitting","reset","getValues","event","preventDefault","delay","Field","isDisabled","name","label","isRequired","defaultValue","fieldProps","autoComplete","validate","value","error","valid","meta","Button","length","appearance","isLoading","style","marginTop","height","List","div","RequestContainer","IconButton","button","StyledButton","removeRequest","index","start","stop","map","request","key","className","requestName","disabled","onClick","ButtonGroup","Wrapper","Animation","p","load","secondsLeft","src","logo","alt","Paper","Title","h1","ControlsWrapper","App","Boolean","window","location","hostname","match","initialState","simulateAsync","watchSimulateAsync","rootSaga","generatePayload","action","i","q","put","cancelled","takeLatest","task","take","cancel","all","rootReducer","combineReducers","concat","slice","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.af123320.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"recompose\";\nimport { GlobalStateTree } from \"../redux/rootReducer\";\nimport Button from \"@atlaskit/button\";\nimport TextField from \"@atlaskit/textfield\";\nimport { Request, Action } from \"../redux/reducers/requests\";\n\nimport Form, { ErrorMessage, Field } from \"@atlaskit/form\";\nimport { Loader } from \"../redux/reducers/loader\";\nimport styled from \"styled-components\";\n\nconst StyledForm = styled.form`\n  height: 100px;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n`;\n\ninterface InnerProps {}\n\ntype Props = Redux & InnerProps;\n\nconst RequestInput = (props: Props) => {\n  const {\n    requests,\n    addRequest,\n    loader: { loading },\n  } = props;\n  return (\n    <Form<Request>\n      onSubmit={(data: Request) => {\n        addRequest(data);\n      }}\n    >\n      {({ formProps, submitting, reset, getValues }) => (\n        <StyledForm\n          onSubmit={(event) => {\n            event.preventDefault();\n            formProps.onSubmit();\n            if (getValues().delay > 0 && getValues().delay <= 10) reset();\n          }}\n        >\n          <Field\n            isDisabled={loading}\n            name=\"requestName\"\n            label=\"Request name\"\n            isRequired\n            defaultValue=\"\"\n          >\n            {({ fieldProps }) => (\n              <Fragment>\n                <TextField autoComplete=\"off\" {...fieldProps} />\n              </Fragment>\n            )}\n          </Field>\n          <Field\n            isDisabled={loading}\n            name=\"delay\"\n            label=\"Delay (sec)\"\n            defaultValue={1}\n            isRequired\n            validate={(value) => {\n              if (value) {\n                if (value > 10 || value <= 0) return \"From 1s to 10s\";\n              }\n            }}\n          >\n            {({ fieldProps, error, valid, meta }) => (\n              <Fragment>\n                <TextField type=\"number\" {...fieldProps} />\n\n                {error && <ErrorMessage>{error}</ErrorMessage>}\n              </Fragment>\n            )}\n          </Field>\n          <Button\n            isDisabled={requests.length >= 10 || loading}\n            type=\"submit\"\n            appearance=\"primary\"\n            isLoading={submitting}\n            style={{ marginTop: 30, height: 40 }}\n          >\n            Add\n          </Button>\n        </StyledForm>\n      )}\n    </Form>\n  );\n};\n\nconst mapStateToProps = (state: GlobalStateTree): State => ({\n  requests: state.requests,\n  loader: state.loader,\n});\n\nconst mapDispatchToProps: Dispatch = {\n  addRequest: (payload: Request): Action => ({ type: \"ADD_REQUEST\", payload }),\n};\n\ntype Redux = Dispatch & State;\n\ninterface Dispatch {\n  addRequest: (payload: Request) => void;\n}\n\ninterface State {\n  requests: Request[];\n  loader: Loader;\n}\n\nexport default compose<Redux, InnerProps>(\n  connect(mapStateToProps, mapDispatchToProps)\n)(RequestInput);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"recompose\";\nimport { GlobalStateTree } from \"../redux/rootReducer\";\nimport { Request, Action } from \"../redux/reducers/requests\";\nimport Button, { ButtonGroup } from \"@atlaskit/button\";\nimport TrashIcon from \"@atlaskit/icon/glyph/trash\";\nimport styled from \"styled-components\";\nimport { Loader } from \"../redux/reducers/loader\";\n\ninterface InnerProps {}\n\ntype Props = Redux & InnerProps;\n\nconst List = styled.div`\n  margin-bottom: 14px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n`;\n\nconst RequestContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  width: calc(100% - 16px);\n  border: 1px solid grey;\n  padding: 0 8px;\n  margin: 8px 0px;\n  border-radius: 4px;\n  p {\n    font-size: 18px;\n  }\n  p.name {\n    width: calc(50% - 30px);\n    line-break: anywhere;\n  }\n  p.delay {\n    width: calc(50% - 15px);\n  }\n`;\n\nconst IconButton = styled.button`\n  border: none;\n  cursor: pointer;\n  height: 60px;\n  background-color: transparent;\n  &:hover {\n    color: red;\n  }\n  &:focus {\n    outline: none;\n  }\n  &:disabled {\n    color: grey;\n    cursor: not-allowed;\n  }\n`;\n\nconst StyledButton = styled(Button)`\n  margin-right: 14px;\n`;\n\nconst RequestsList = (props: Props) => {\n  const {\n    requests,\n    removeRequest,\n    start,\n    stop,\n    loader: { loading },\n  } = props;\n  return (\n    <List>\n      {requests.map((request, index) => (\n        <RequestContainer key={index}>\n          <p className=\"name\">{request.requestName}</p>\n          <p className=\"delay\">{request.delay} sec</p>\n          <IconButton\n            disabled={loading}\n            onClick={() => removeRequest(request, index)}\n          >\n            <TrashIcon label=\"Delete\" />\n          </IconButton>\n        </RequestContainer>\n      ))}\n      <br />\n      <ButtonGroup>\n        <StyledButton\n          isDisabled={requests.length < 1 || loading}\n          onClick={() => start(props.requests)}\n          appearance=\"primary\"\n        >\n          Run\n        </StyledButton>\n        <Button\n          isDisabled={requests.length < 1 || !loading}\n          onClick={stop}\n          appearance=\"danger\"\n        >\n          Stop\n        </Button>\n      </ButtonGroup>\n    </List>\n  );\n};\n\nconst mapStateToProps = (state: GlobalStateTree): State => ({\n  requests: state.requests,\n  loader: state.loader,\n});\n\nconst mapDispatchToProps: Dispatch = {\n  removeRequest: (payload: Request, index: number): Action => ({\n    type: \"REMOVE_REQUEST\",\n    payload,\n    index,\n  }),\n  start: (payload: Request[]) => ({ type: \"SIMULATE_ASYNC\", payload }),\n  stop: () => ({ type: \"SIMULATE_STOP\" }),\n};\n\ntype Redux = Dispatch & State;\n\ninterface Dispatch {\n  removeRequest: (payload: Request, index: number) => void;\n  start: (payload: Request[]) => void;\n  stop: () => void;\n}\n\ninterface State {\n  requests: Request[];\n  loader: Loader;\n}\n\nexport default compose<Redux, InnerProps>(\n  connect(mapStateToProps, mapDispatchToProps)\n)(RequestsList);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"recompose\";\nimport { GlobalStateTree } from \"../redux/rootReducer\";\nimport styled from \"styled-components\";\nimport { Loader as LoaderInterface } from \"../redux/reducers/loader\";\n\nimport logo from \"../logo.svg\";\n\ninterface InnerProps {}\n\ntype Props = Redux & InnerProps;\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ninterface AnimationProps {\n  load: boolean;\n}\n\nconst Animation = styled.div`\n  text-align: center;\n  img {\n    transition: height 0.5s;\n    height: 200px;\n    \n    pointer-events: none;\n  }\n\n  @media (prefers-reduced-motion: no-preference) {\n    img {\n      animation: App-logo-spin infinite 6s linear;\n      animation-play-state: ${(p: AnimationProps) => (p.load ? \"running\" : \"paused\")};\n    }\n  }\n\n  @keyframes App-logo-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst Loader = (props: Props) => {\n  const {\n    loader: { loading, requestName, secondsLeft },\n  } = props;\n  return (\n    <Wrapper>\n      <Animation load={loading}>\n        <img src={logo} alt=\"logo\" />\n      </Animation>\n      <h4>{requestName}</h4>\n      {!!secondsLeft && <div>({secondsLeft} sec left)</div>}\n    </Wrapper>\n  );\n};\n\nconst mapStateToProps = (state: GlobalStateTree): State => ({\n  loader: state.loader,\n});\n\ntype Redux = State;\n\ninterface State {\n  loader: LoaderInterface;\n}\n\nexport default compose<Redux, InnerProps>(connect(mapStateToProps, null))(\n  Loader\n);\n","import styled from \"styled-components\";\n\nexport const Paper = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  margin: 24px auto;\n  width: 800px;\n  min-height: calc(100vh - 48px - 28px);\n  position: relative;\n  background: #e8e8e8;\n  box-shadow: 2px 2px 4px 0px rgba(0, 0, 0, 0.5),\n    0px 0px 4px 0px rgba(0, 0, 0, 0.5);\n  padding: 14px;\n  border-radius: 8px;\n  flex-wrap: wrap\n`;\n","import styled from \"styled-components\";\n\nexport const Title = styled.h1`\n  width: 100%;\n  text-align: center;\n  font-weight: bold;\n`;\n\n","import styled from \"styled-components\";\n\nexport const ControlsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 500px\n`;\n","import React from \"react\";\nimport RequestInput from \"./components/RequestInput\";\nimport RequestsList from \"./components/RequestsList\";\nimport Loader from \"./components/Loader\";\nimport { Paper } from \"./components/Styled/Paper\";\nimport { Title } from \"./components/Styled/Title\";\nimport { ControlsWrapper } from \"./components/Styled/ControlsWrapper\";\n\nconst App = () => {\n  return (\n    <Paper>\n      <ControlsWrapper>\n        <Title>Request Simulator</Title>\n        <RequestInput />\n        <RequestsList />\n      </ControlsWrapper>\n      <Loader />\n    </Paper>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const UPDATE_LOADER = \"UPDATE_LOADER\";\nexport const STOP_LOADER = \"STOP_LOADER\";\n\nexport interface Action {\n  type: \"UPDATE_LOADER\" | \"STOP_LOADER\";\n  payload: Loader;\n}\n\nexport interface Loader {\n  loading: boolean;\n  requestName: string;\n  secondsLeft: number;\n}\n\nconst initialState = { loading: false, requestName: \"\", secondsLeft: 0 };\n\nexport const loader = (state: Loader = initialState, action: Action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case \"UPDATE_LOADER\":\n      return payload;\n    case \"STOP_LOADER\":\n      return initialState;\n    default:\n      return state;\n  }\n};\n","import {\n  all,\n  cancel,\n  take,\n  cancelled,\n  delay,\n  takeLatest,\n  put,\n} from \"redux-saga/effects\";\nimport { Request } from \"./reducers/requests\";\nimport { UPDATE_LOADER, STOP_LOADER } from \"./reducers/loader\";\n\ninterface SimulateAction {\n  type: \"SIMULATE_ASYNC\";\n  payload: Request[];\n}\n\nconst generatePayload = (\n  loading: boolean,\n  requestName: string,\n  secondsLeft: number\n) => ({\n  loading: loading,\n  requestName: requestName,\n  secondsLeft: secondsLeft,\n});\n\nfunction* simulateAsync(action: SimulateAction) {\n  const { payload: requests } = action;\n  try {\n    for (let i = 0; i < requests.length; i++) {\n      for (let q = 0; q < requests[i].delay; q++) {\n        const payload = generatePayload(\n          true,\n          requests[i].requestName,\n          requests[i].delay - q\n        );\n        yield put({ type: UPDATE_LOADER, payload });\n        yield delay(1000);\n      }\n    }\n  } finally {\n    const payload = generatePayload(false, \"\", 0);\n    if (yield cancelled()) {\n      yield put({ type: STOP_LOADER, payload });\n    } else {\n      yield put({ type: STOP_LOADER, payload });\n    }\n  }\n}\n\nfunction* watchSimulateAsync() {\n  while (true) {\n    const task = yield takeLatest(\"SIMULATE_ASYNC\", simulateAsync);\n    yield take(\"SIMULATE_STOP\");\n    yield cancel(task);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([watchSimulateAsync()]);\n}\n","import { combineReducers } from \"redux\";\nimport { requestsList, Request } from \"./reducers/requests\";\nimport { loader, Loader } from \"./reducers/loader\";\n\nexport interface GlobalStateTree {\n  requests: Request[];\n  loader: Loader;\n}\n\nexport const rootReducer = combineReducers<GlobalStateTree>({\n  requests: requestsList,\n  loader: loader,\n});\n","export const ADD_REQUEST = \"ADD_REQUEST\"\nexport const REMOVE_REQUEST = \"REMOVE_REQUEST\"\n\nexport interface Action {\n  type: \"ADD_REQUEST\" | \"REMOVE_REQUEST\";\n  payload: Request,\n  index?: number\n}\n\nexport interface Request {\n  requestName: string;\n  delay: number\n}\n\nexport const requestsList = (state: Request[] = [], action: Action) => {\n  const {type, payload, index = 0} = action\n  switch (type) {\n    case ADD_REQUEST:\n      return [...state].concat(payload);\n    case REMOVE_REQUEST: \n      return [...state.slice(0, index), ...state.slice(index + 1)]\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootSaga from \"./redux/sagas\";\nimport { rootReducer } from \"./redux/rootReducer\";\n\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}